# -*- coding: utf-8 -*-
"""
Created on Sun Aug 23 13:04:40 2020

@author: le
"""

#import numpy as np
#A = np.array([[1,3,5],[1/3,1,2],[1/5,1/2,1]])
#print('打印A：\n{}'.format(A))
#a, b = np.linalg.eig(A)
#print('打印特征值a：\n{}'.format(a))
#print('打印特征向量b：\n{}'.format(b))


#import numpy as np
#A = np.array([[1,5,2,3],[1/5,1,1/3,1/2],[1/2,3,1,2],[1/3,2,1/2,1]])
#print('打印A：\n{}'.format(A))
#a, b = np.linalg.eig(A)
#print('打印特征值a：\n{}'.format(a))
#print('打印特征向量b：\n{}'.format(b))


##coding=utf-8
#import numpy as np
#li=[[100,90,100,84,90,100,100,100,100],
#    [100,100,78.6,100,90,100,100,100,100],
#    [75,100,85.7,100,90,100,100,100,100],
#    [100,100,78.6,100,90,100,94.4,100,100],
#    [100,90,100,100,100,90,100,100,80],
#    [100,100,100,100,90,100,100,85.7,100],
#    [100 ,100 ,78.6,100 ,90 , 100, 55.6,    100, 100],
#    [87.5  ,  100 ,85.7 ,   100 ,100 ,100, 100 ,100 ,100],
#    [100 ,100, 92.9  ,  100 ,80 , 100 ,100 ,100 ,100],
#    [100,90 ,100 ,100, 100, 100, 100, 100, 100],
#    [100,100 ,92.9 ,   100, 90 , 100, 100 ,100 ,100]]
#li = np.array(li)
##转换为矩阵
#li=(li-li.min())/(li.max()-li.min())
##最大最小标准化
#m, n = li.shape
##m,n为矩阵行和列数
#k = 1 / np.log(m)
#yij = li.sum(axis=0)  # axis=0列相加 axis=1行相加
#pij = li / yij
#test = pij * np.log(pij)
#test = np.nan_to_num(test)
##将nan空值转换为0
#ej = -k * (test.sum(axis=0))
## 计算每种指标的信息熵
#wi = (1 - ej) / np.sum(1 - ej)
##计算每种指标的权重
#
#print(wi)


#coding=utf-8
#import numpy as np
#import pandas as pd
#li=[[100,90,100,84,90,100,100,100,100],
#[100,100,78.6,100,90,100,100,100,100],
#[75,100,85.7,100,90,100,100,100,100],
#[100,100,78.6,100,90,100,94.4,100,100],
#[100,90,100,100,100,90,100,100,80],
#[100,100,100,100,90,100,100,85.7,100],
#[100,100,78.6,100,90,100,55.6,100,100],
#[87.5,100,85.7,100,100,100,100,100,100],
#[100,100,92.9,100,80,100,100,100,100],
#[100,90,100,100,100,100,100,100,100],
#[100,100,92.9,100,90,100,100,100,100]]

#fp=r"G:\paper_data1.csv"
#li=pd.read_excel("G:/paper_data1.xlsx")


li0=[[0.10,0.15,0.15,0.15,0.30],
    [0.05,0.25,0.05,0.25,0.25],
    [0.10,0.10,0.15,0.20,0.05],
    [0.15,0.10,0.20,0.25,0.30],
    [0.20,0.15,0.25,0.20,0.20],
    [0.10,0.15,0.15,0.15,0.10],
    [0.20,0.30,0.05,0.05,0.10],
    [0.15,0.10,0.15,0.15,0.15],
    [0.20,0.10,0.10,0.15,0.25],
    [0.05,0.30,0.10,0.20,0.25],
    [0.10,0.15,0.15,0.15,0.25],
    [0.05,0.05,0.25,0.20,0.25],
    [0.05,0.10,0.10,0.10,0.20],
    [0.10,0.10,0.25,0.25,0.25],
    [0.20,0.10,0.10,0.20,0.15],
    [0.20,0.30,0.20,0.05,0.10],
    [0.15,0.30,0.20,0.05,0.25],
    [0.25,0.10,0.25,0.15,0.15],
    [0.10,0.20,0.15,0.10,0.25],
    [0.25,0.05,0.25,0.20,0.25],
    [0.25,0.25,0.10,0.05,0.20],
    [0.20,0.15,0.10,0.15,0.25]]
li1=[[0.10,0.15,0.15,0.15,0.30],
    [0.05,0.25,0.05,0.25,0.25],
    [0.10,0.10,0.15,0.20,0.05]]
li2=[[0.15,0.10,0.20,0.25,0.30],
    [0.20,0.15,0.25,0.20,0.20]]
li3=[[0.10,0.15,0.15,0.15,0.10],
     [0.20,0.30,0.05,0.05,0.10]]
li4=[[0.15,0.10,0.15,0.15,0.15],
    [0.20,0.10,0.10,0.15,0.25],
    [0.05,0.30,0.10,0.20,0.25],
    [0.10,0.15,0.15,0.15,0.25]]
li5=[[0.05,0.05,0.25,0.20,0.25],
    [0.05,0.10,0.10,0.10,0.20],
    [0.10,0.10,0.25,0.25,0.25]]
li6=[[0.20,0.10,0.10,0.20,0.15],
    [0.20,0.30,0.20,0.05,0.10],
    [0.15,0.30,0.20,0.05,0.25],
    [0.25,0.10,0.25,0.15,0.15]]
li7=[[0.10,0.20,0.15,0.10,0.25],
    [0.25,0.05,0.25,0.20,0.25]]



#=====================
li8=[[0.15,0.25,0.05,0.10,0.25],
     [0.15,0.15,0.20,0.05,0.10]]
li9=[[0.15,0.05,0.15,0.05,0.20],
    [0.10,0.30,0.30,0.15,0.05],
    [0.25,0.25,0.10,0.05,0.25]]
li10=[[0.25,0.15,0.10,0.05,0.15],
      [0.30,0.15,0.15,0.20,0.10]]
li11=[[0.15,0.10,0.25,0.20,0.15],
      [0.05,0.20,0.20,0.15,0.10]]


li12=[[0.25,0.20,0.15,0.10,0.10],
    [0.15,0.30,0.10,0.10,0.25],
    [0.10,0.30,0.20,0.05,0.30],
    [0.15,0.15,0.25,0.15,0.15]]








def get_ratio(a):
    import numpy as np
    import pandas as pd
    li=np.array(a)
    li=li.T
    #转换为矩阵
    li=(li-li.min())/(li.max()-li.min())
    #最大最小标准化
    m,n=li.shape
    #m,n为矩阵行和列数
    k=1/np.log(m)
    yij=li.sum(axis=0)#axis=0列相加axis=1行相加
    pij=li/yij
    test=pij*np.log(pij)
    test=np.nan_to_num(test)
    #将nan空值转换为0
    ej=-k*(test.sum(axis=0))
    #计算每种指标的信息熵
    wi=(1-ej)/np.sum(1-ej)
    #计算每种指标的权重
#    print(m,n)
#    print(wi)
    print([float('{:.4f}'.format(i)) for i in wi])
#    print(len(wi))
#    print(sum(wi))

if __name__ == '__main__':

    # print(__name__)
    get_ratio(li1)
    print(get_ratio(li1))
    for i in list(range(13)):
        
        if i==0:
            continue
        else:
#            print(i,'------------------')
#            get_ratio("{0}{1}".format("li",i))
            print('''print({},'------------------')'''.format(i))
            print("print(get_ratio({0}{1}))".format("li",i))
#            aa = "print({0}{1})".format("li",i)
#            get_ratio(li1)
#            print(aa)
#            get_ratio(aa)
    print(0,'==================')
    print(get_ratio(li0))
    print(1,'------------------')
    print(get_ratio(li1))
    print(2,'------------------')
    print(get_ratio(li2))
    print(3,'------------------')
    print(get_ratio(li3))
    print(4,'------------------')
    print(get_ratio(li4))
    print(5,'------------------')
    print(get_ratio(li5))
    print(6,'------------------')
    print(get_ratio(li6))
    print(7,'------------------')
    print(get_ratio(li7))
    print(8,'==================')
    print(get_ratio(li8))
    print(9,'------------------')
    print(get_ratio(li9))
    print(10,'------------------')
    print(get_ratio(li10))
    print(11,'------------------')
    print(get_ratio(li11))
    print(12,'==================')
    print(get_ratio(li12))





